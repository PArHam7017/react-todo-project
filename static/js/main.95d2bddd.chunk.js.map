{"version":3,"sources":["serviceWorker.js","stores/index.js","components/Navigation/Navigation.js","models/todoModel.js","stores/TodoStore.js","components/TodoList/AddTodo.js","components/TodoList/TodoItem.js","components/TodoList/TodoFilters.js","components/TodoList/TodoList.js","components/TodoBoard/TodoBoard.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","configure","enforceActions","store","value","this","_time","observable","Date","action","Navigation","observer","setInterval","setTime","Navbar","className","bg","variant","Brand","href","Nav","getTime","toLocaleTimeString","React","Component","todoModel","id","title","remindAt","_completed","_title","_remindAt","_id","todoStore","lastId","itemPerPage","todo","todos","push","oldTodo","newTodo","index","findIndex","v","filter","currentPage","page","filteredTodos","completed","AddTodo","props","handleAddTodoClick","state","addTodo","setState","e","target","keyCode","type","placeholder","onChange","updateInput","onKeyDown","handleKeyDown","onClick","Provider","TodoItem","checked","updateTodo","handleChangeCheckbox","htmlFor","TodoFilters","preventDefault","filterTodos","length","key","changeFilter","TodoList","maxPage","Math","floor","pages","tmpPages","i","Pagination","Item","active","changePage","slice","map","First","Prev","Next","Last","TodoBoard","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95d2bddd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {observable, action, configure} from \"mobx\";\r\n\r\nconfigure({enforceActions: \"observed\"});\r\n\r\n\r\nclass Store {\r\n    @observable _time = new Date();\r\n\r\n    @action setTime(value) {\r\n        this._time = value;\r\n    }\r\n\r\n\r\n    getTime() {\r\n        return this._time;\r\n    }\r\n}\r\n\r\nconst store = new Store();\r\nexport default store;","import React from 'react';\r\nimport './Navigation.css';\r\nimport store from '../../stores';\r\nimport {observer} from \"mobx-react\";\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\n\r\n@observer\r\nclass Navigation extends React.Component {\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            store.setTime(new Date());\r\n        } , 1000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar className={\"navbar\"} bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">ToDo</Navbar.Brand>\r\n                <Nav className=\"time ml-auto\">\r\n                    {store.getTime().toLocaleTimeString()}\r\n                </Nav>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;\r\n","class todoModel {\r\n    id;\r\n    title;\r\n    completed;\r\n    remindAt;\r\n\r\n    constructor(id , title , remindAt = null) {\r\n        this._completed = false;\r\n        this._title = title;\r\n        this._remindAt = remindAt;\r\n        this._id = id;\r\n    }\r\n\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get title() {\r\n        return this._title;\r\n    }\r\n\r\n    set title(value) {\r\n        this._title = value;\r\n    }\r\n\r\n    get remindAt() {\r\n        return this._remindAt;\r\n    }\r\n\r\n    set remindAt(value) {\r\n        this._remindAt = value;\r\n    }\r\n\r\n    get completed() {\r\n        return this._completed;\r\n    }\r\n\r\n    set completed(value) {\r\n        this._completed = value;\r\n    }\r\n}\r\n\r\nexport default todoModel","import {observable, action} from \"mobx\";\r\nimport todoModel from \"../models/todoModel\";\r\n\r\n\r\nclass TodoStore {\r\n    lastId = 3;\r\n    @observable todos = [\r\n        // {id: 0, title: \"title1\", completed: false, remindAt: null},\r\n        // {id: 1, title: \"title2\", completed: true, remindAt: null},\r\n        // {id: 2, title: \"title3\", completed: false, remindAt: null},\r\n    ];\r\n    @observable filter = 0;\r\n    @observable currentPage = 1;\r\n    itemPerPage = 4;\r\n\r\n    @action\r\n    addTodo(title) {\r\n        const todo = new todoModel(this.lastId++, title);\r\n        this.todos.push(todo);\r\n    }\r\n\r\n    @action\r\n    updateTodo(oldTodo, newTodo) {\r\n        const index = this.todos.findIndex(function (v) {\r\n            return v.id === oldTodo.id;\r\n        });\r\n        this.todos[index] = newTodo;\r\n    }\r\n\r\n    @action\r\n    filterTodos(filter) {\r\n        this.filter = filter;\r\n        this.currentPage = 1;\r\n    }\r\n\r\n    @action\r\n    changePage(page) {\r\n        this.currentPage = page;\r\n    }\r\n\r\n    filteredTodos(filter = this.filter) {\r\n        let filteredTodos;\r\n        if (filter === 0) {\r\n            filteredTodos = this.todos;\r\n        } else if (filter === 1) {\r\n            filteredTodos = this.todos.filter(todo => todo.completed !== true)\r\n        } else if (filter === 2) {\r\n            filteredTodos = this.todos.filter(todo => todo.completed === true)\r\n        }\r\n        return filteredTodos;\r\n    }\r\n}\r\n\r\nconst todoStore = new TodoStore();\r\nexport default todoStore;","import React from 'react';\r\nimport {IconContext} from \"react-icons\";\r\nimport {IoIosAddCircle} from \"react-icons/io\";\r\nimport todoStore from \"../../stores/TodoStore\";\r\nimport {observer} from \"mobx-react\";\r\n\r\n@observer\r\nclass AddTodo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: ''\r\n        };\r\n    }\r\n\r\n    handleAddTodoClick = () => {\r\n        if (this.state.title) {\r\n            todoStore.addTodo(this.state.title);\r\n            this.setState({title : ''});\r\n        }\r\n    };\r\n\r\n    updateInput(e) {\r\n        this.setState({title : e.target.value});\r\n    };\r\n\r\n    handleKeyDown(e){\r\n        if (e.keyCode === 13) {\r\n            this.handleAddTodoClick();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"add-todo\">\r\n                <input\r\n                    value={this.state.title}\r\n                    type=\"text\"\r\n                    placeholder={\"New Todo\"}\r\n                    onChange={e => this.updateInput(e)}\r\n                    onKeyDown={e => this.handleKeyDown(e)}\r\n\r\n                />\r\n                <button type={\"button\"} onClick={this.handleAddTodoClick}>\r\n                    <IconContext.Provider value={{className: \"add-icon\"}}>\r\n                        <IoIosAddCircle/>\r\n                    </IconContext.Provider>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\nimport {observer} from \"mobx-react\";\r\nimport todoStore from \"../../stores/TodoStore\";\r\nimport todoModel from \"../../models/todoModel\";\r\n\r\n@observer\r\nclass TodoItem extends React.Component {\r\n    handleChangeCheckbox(e) {\r\n        const newTodo = new todoModel(\r\n            this.props.todo.id ,\r\n            this.props.todo.title ,\r\n        );\r\n        newTodo.completed = e.target.checked;\r\n        todoStore.updateTodo(this.props.todo  , newTodo);\r\n    }\r\n\r\n    render() {\r\n        const title = (() => {\r\n            if (this.props.todo.completed) {\r\n                return (<del className=\"todo-title d-inline-block completed\">{this.props.todo.title}</del>)\r\n            } else {\r\n                return (<p className=\"todo-title d-inline-block\">{this.props.todo.title}</p>)\r\n            }\r\n        })();\r\n\r\n        return (\r\n            <div className=\"todo-item\">\r\n                <div className=\"round d-inline-block\">\r\n                    <input\r\n                        checked={this.props.todo.completed}\r\n                        type=\"checkbox\"\r\n                        id={\"checkbox\" + this.props.todo.id}\r\n                        onChange={e => this.handleChangeCheckbox(e)}/>\r\n                    <label htmlFor={\"checkbox\" + this.props.todo.id}/>\r\n                </div>\r\n                {title}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport todoStore from \"../../stores/TodoStore\";\r\nimport {observer} from \"mobx-react\";\r\n\r\n@observer\r\nclass TodoFilters extends React.Component {\r\n    changeFilter(e , filter){\r\n        e.preventDefault();\r\n        todoStore.filterTodos(filter);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card-footer\">\r\n                <span className=\"todo-count\"><strong id=\"items-left\">{todoStore.filteredTodos(1).length}</strong> items left</span>\r\n                <ul className=\"filters\">\r\n                    <li key={0}>\r\n                        <button className={\"filter-all \"+((todoStore.filter === 0)?\"active\" : \"\")}\r\n                           onClick={(e) => {this.changeFilter(e ,0)}}>All</button>\r\n                    </li>\r\n                    <li key={1}>\r\n                        <button className={\"filter-active \"+((todoStore.filter === 1)?\"active\" : \"\")}\r\n                           onClick={(e) => {this.changeFilter(e ,1)}}>Active</button>\r\n                    </li>\r\n                    <li key={2}>\r\n                        <button className={\"filter-completed \"+((todoStore.filter === 2)?\"active\" : \"\")}\r\n                           onClick={(e) => {this.changeFilter(e ,2)}}>Completed</button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoFilters;\r\n","import React from 'react';\nimport './TodoList.css';\nimport AddTodo from \"./AddTodo\";\nimport TodoItem from \"./TodoItem\";\nimport TodoFilters from \"./TodoFilters\";\nimport todoStore from \"../../stores/TodoStore\";\nimport {observer} from \"mobx-react\";\nimport {Pagination} from \"react-bootstrap\";\n\n@observer\nclass TodoList extends React.Component {\n    render() {\n        let maxPage = Math.floor(todoStore.filteredTodos().length / todoStore.itemPerPage);\n        if ((todoStore.filteredTodos().length - (maxPage*todoStore.itemPerPage)) > 0) maxPage++;\n\n        const pages = (() => {\n            const tmpPages = [];\n            for (let i = 1;i < maxPage + 1;i++) {\n                tmpPages.push(\n                    <Pagination.Item key={i} active={(todoStore.currentPage === i)} onClick={() => {\n                        todoStore.changePage(i);\n                    }}>{i}</Pagination.Item>\n                );\n            }\n            return tmpPages;\n        } )();\n\n        return (\n            <div className=\"todo-area\">\n                <div className=\"card todo-card\">\n                    <div className=\"card-header\">Todo List</div>\n                    <div className=\"card-body\">\n                        <AddTodo />\n                        <hr/>\n                        <div className=\"todo-list\">\n                            {todoStore.filteredTodos()\n                                .slice((todoStore.currentPage - 1)*todoStore.itemPerPage , (todoStore.currentPage)*todoStore.itemPerPage)\n                                .map(todo => {\n                                    return <TodoItem key={todo.id} todo={todo}/>\n                                })}\n                        </div>\n                        <Pagination>\n                            <Pagination.First onClick={() => {todoStore.changePage(1)}}/>\n\n                            <Pagination.Prev onClick={() => {\n                                const page =  (todoStore.currentPage > 1) ? todoStore.currentPage - 1 : 1;\n                                todoStore.changePage(page);\n                            }} />\n\n                            {pages}\n\n                            <Pagination.Next onClick={() => {\n                                const page =  (todoStore.currentPage < maxPage) ? todoStore.currentPage + 1 : maxPage;\n                                todoStore.changePage(page);\n                            }} />\n\n                            <Pagination.Last onClick={() => {todoStore.changePage(maxPage)}} />\n                        </Pagination>\n                    </div>\n                    <TodoFilters/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n","import React from 'react';\r\nimport './TodoBoard.css';\r\nimport TodoList from \"../TodoList/TodoList\";\r\n\r\nfunction TodoBoard() {\r\n    return (\r\n        <div className=\"full-page-bg\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6 offset-md-3\">\r\n                        <TodoList />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoBoard;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Navigation from \"../Navigation/Navigation\";\r\nimport TodoBoard from \"../TodoBoard/TodoBoard\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Navigation />\r\n            <TodoBoard />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.css';\nimport './styles/style.css';\nimport './styles/responsive.css';\nimport './assets/bootstrap-4.3.1-dist/css/bootstrap.min.css';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./components/App/App\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}